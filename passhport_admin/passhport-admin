#!/usr/bin/env python
# -*-coding:Utf-8 -*-

"""paSSHport-admin

Usage:
    passhport-admin (-i | --interactive)
    passhport-admin (-h | --help)
    passhport-admin user list
    passhport-admin user search [<pattern>]
    passhport-admin user show [<name>]
    passhport-admin user create [((<name> <sshkey>) \
[--comment=<comment>])]
    passhport-admin user edit [(<name> [--newname=<name>] \
[--newsshkey=<sshkey>] [--newcomment=<comment>])]
    passhport-admin user delete [([-f | --force] <name>)]
    passhport-admin target list
    passhport-admin target search [<pattern>]
    passhport-admin target show [<name>]
    passhport-admin target create [((<name> <hostname>) \
[--comment=<comment>] [--sshoptions=<sshoptions>] [--port=<port>])]
    passhport-admin target edit [(<name> [--newname=<name>] \
[--newhostname=<hostname>] [--newcomment=<comment>] \
[--newsshoptions=<sshoptions>] [--newport=<port>])]
    passhport-admin target (adduser | rmuser) \
[(<username> <targetname>)]
    passhport-admin target (addusergroup | rmusergroup) \
[(<usergroupname> <targetname>)]
    passhport-admin target delete [([-f | --force] <name>)]
    passhport-admin usergroup list
    passhport-admin usergroup search [<pattern>]
    passhport-admin usergroup show [<name>]
    passhport-admin usergroup create [(<name> [--comment=<comment>])]
    passhport-admin usergroup edit [(<name> [--newname=<name>] \
[--newcomment=<comment>])]
    passhport-admin usergroup (adduser | rmuser) \
[(<username> <usergroupname>)]
    passhport-admin usergroup (addusergroup | rmusergroup) \
[(<subusergroupname> <usergroupname>)]
    passhport-admin usergroup delete [([-f | --force] <name>)]
    passhport-admin targetgroup list
    passhport-admin targetgroup search [<pattern>]
    passhport-admin targetgroup show [<name>]
    passhport-admin targetgroup create [(<name> [--comment=<comment>])]
    passhport-admin targetgroup edit [(<name> [--newname=<name>] \
[--newcomment=<comment>])]
    passhport-admin targetgroup (adduser | rmuser) \
[(<username> <targetgroupname>)]
    passhport-admin targetgroup (addtarget | rmtarget) \
[(<targetname> <targetgroupname>)]
    passhport-admin targetgroup (addusergroup | rmusergroup) \
[(<usergroupname> <targetgroupname>)]
    passhport-admin targetgroup (addtargetgroup | rmtargetgroup) \
[(<subtargetgroupname> <targetgroupname>)]
    passhport-admin targetgroup delete [([-f | --force] <name>)]

Arguments:
    name                The name of the object.
    username            The name of the user.
    targetname          The name of the target.
    usergroupname       The name of the usergroup.
    subusergroupname    The name of the subusergroup.
    targetgroupname     The name of the targetgroup.
    subtargetgroupname  The name of the subtargetgroup.
    comment             A comment about the object.
    pattern             A SQL search pattern.
    sshkey              The SSH key used to authenticate the user.
    hostname            The name of the server of the target.
    sshoptions          ???
    port                The port used to connect with the target.

Options:
    -i, --interactive               Interactive mode.
    -h, --help                      Show this screen and exit.
    -f, --force                     Force deletion without asking \
confirmation.
    --comment=<comment>             Set a comment to the object.
    --sshoptions=<sshoptions>       Set SSH options to the target.
    --port=<port>                   Set port used to connect with \
the target.
    --newname=<name>                Set the new name of the object.
    --newcomment=<comment>          Set the new comment of the object.
    --newsshkey=<sshkey>            Set the new SSH key of the user.
    --newhostname=<hostname>        Set the new hostname of the target.
    --newsshoptions=<sshoptions>    Set the new SSH options \
of the target.
    --newport=<port>                Set the new port used \
with the target.
"""

# Compatibility 2.7-3.4
from __future__ import absolute_import
from __future__ import unicode_literals

import signal
import sys
import cmd

from manager import (prompt_functions, requests_functions, user, target,
usergroup, targetgroup)

from docopt import docopt, DocoptExit

def signal_handler(signal, frame):
    print "\nExiting at your own sweet will."
    sys.exit(0)

def docopt_cmd(func):
    """This decorator is used to simplify the try/except block and pass
    the result of the docopt parsing to the called action.
    """

    def fn(self, arg):
        try:
            opt = docopt(fn.__doc__, arg)

        except DocoptExit as e:
            # The DocoptExit is thrown when the args do not match.
            # We print a message to the user and the usage block.
            print("Invalid command!")
            print(e)

            return None

        except SystemExit:
            # The SystemExit exception prints the usage for --help
            # We do not need to do the print here.
            return None

        return func(self, opt)

    fn.__name__ = func.__name__
    fn.__doc__ = func.__doc__
    fn.__dict__.update(func.__dict__)

    return fn

class MyInteractive(cmd.Cmd):
    intro = "Welcome to the interactive program" + \
        " (type help for a list of commands)!"
    prompt = "(passhport) "
    file = None

    @docopt_cmd
    def do_user(self, arg):
        """
Usage:
    user list
    user search [<pattern>]
    user show [<name>]
    user create [((<name> <sshkey>) [--comment=<comment>])]
    user edit [(<name> [--newname=<name>] [--newsshkey=<sshkey>] \
[--newcomment=<comment>])]
    user delete [([-f | --force] <name>)]

Arguments:
    name     The name of the object.
    comment  A comment about the object.
    pattern  A SQL search pattern.
    sshkey   The SSH key used to authenticate the user.

Options:
    -f, --force             Force deletion without asking confirmation.
    --comment=<comment>     Set a comment to the object.
    --newname=<name>        Set the new name of the object.
    --newcomment=<comment>  Set the new comment of the object.
    --newsshkey=<sshkey>    Set the new SSH key of the user.
        """
        commands = {"list", "search", "show", "create", "edit", "delete"}
        arguments = {"<name>", "<pattern>", "<sshkey>"}
        options = {
            "--force",
            "--comment",
            "--newname",
            "--newcomment",
            "--newsshkey"}
        method = ""
        param = {}

        for key, value in arg.items():
            if value:
                if key in commands:
                    method = key
                else:
                    param[key] = value

        if param:
            getattr(requests_functions, method)("user", param)
        else:
            getattr(prompt_functions, method)("user")

    @docopt_cmd
    def do_target(self, arg):
        """
Usage:
    target list
    target search [<pattern>]
    target show [<name>]
    target create [((<name> <hostname>) \
[--comment=<comment>] [--sshoptions=<sshoptions>] [--port=<port>])]
    target edit [(<name> [--newname=<name>] \
[--newhostname=<hostname>] [--newcomment=<comment>] \
[--newsshoptions=<sshoptions>] \[--newport=<port>])]
    target (adduser | rmuser) [(<username> <targetname>)]
    target (addusergroup | rmusergroup) \
[(<usergroupname> <targetname>)]
    target delete [([-f | --force] <name>)]

Arguments:
    name           The name of the object.
    username       The name of the user.
    targetname     The name of the target.
    usergroupname  The name of the usergroup.
    comment        A comment about the object.
    pattern        A SQL search pattern.
    hostname       The name of the server of the target.
    sshoptions     ???
    port           The port used to connect with SSH.

Options:
    -f, --force                     Force deletion without asking \
confirmation.
    --comment=<comment>             Set a comment to the object.
    --sshoptions=<sshoptions>       Set SSH options to the target.
    --port=<port>                   Set port used to connect with \
the target.
    --newname=<name>                Set the new name of the object.
    --newcomment=<comment>          Set the new comment of the object.
    --newhostname=<hostname>        Set the new hostname of the target.
    --newsshoptions=<sshoptions>    Set the new SSH options \
of the target.
    --newport=<port>                Set the new port used \
with the target.
        """
        commands = {
            "list",
            "search",
            "show",
            "create",
            "edit",
            "delete",
            "adduser",
            "rmuser",
            "addusergroup",
            "rmusergroup"}
        arguments = {
            "<name>",
            "<username>",
            "<targetname>",
            "<usergroupname>",
            "<pattern>",
            "<hostname>"}
        options = {
            "--force",
            "--comment",
            "--sshoptions",
            "--port",
            "--newname",
            "--newcomment",
            "--newhostname",
            "--newsshoptions",
            "--newport"}
        method = ""
        param = {}

        for key, value in arg.items():
            if value:
                if key in commands:
                    method = key
                else:
                    param[key] = value

        if param:
            getattr(requests_functions, method)("target", param)
        else:
            getattr(prompt_functions, method)("target")

    @docopt_cmd
    def do_usergroup(self, arg):
        """
Usage:
    usergroup list
    usergroup search [<pattern>]
    usergroup show [<name>]
    usergroup create [(<name> [--comment=<comment>])]
    usergroup edit [(<name> [--newname=<name>] \
[--newcomment=<comment>])]
    usergroup (adduser | rmuser) [(<username> <usergroupname>)]
    usergroup (addusergroup | rmusergroup) \
[(<subusergroupname> <usergroupname>)]
    usergroup delete [([-f | --force] <name>)]

Arguments:
    name              The name of the object.
    username          The name of the user.
    usergroupname     The name of the usergroup.
    subusergroupname  The name of the subusergroup.
    comment           A comment about the object.
    pattern           A SQL search pattern.

Options:
    -f, --force             Force deletion without asking confirmation.
    --comment=<comment>     Set a comment to the object.
    --newname=<name>        Set the new name of the object.
    --newcomment=<comment>  Set the new comment of the object.
        """
        commands = {
            "list",
            "search",
            "show",
            "create",
            "edit",
            "delete",
            "adduser",
            "rmuser",
            "addusergroup",
            "rmusergroup"}
        arguments = {
            "<name>",
            "<username>",
            "<usergroupname",
            "<subusergroupname>",
            "<pattern>"}
        options = {
            "--force",
            "--comment",
            "--newname",
            "--newcomment"}
        method = ""
        param = {}

        for key, value in arg.items():
            if value:
                if key in commands:
                    method = key
                else:
                    param[key] = value

        if param:
            getattr(requests_functions, method)("usergroup", param)
        else:
            getattr(prompt_functions, method)("usergroup")

    @docopt_cmd
    def do_targetgroup(self, arg):
        """
Usage:
    targetgroup list
    targetgroup search [<pattern>]
    targetgroup show [<name>]
    targetgroup create [(<name> [--comment=<comment>])]
    targetgroup edit [(<name> [--newname=<name>] \
[--newcomment=<comment>])]
    targetgroup (adduser | rmuser) [(<username> <targetgroupname>)]
    targetgroup (addtarget | rmtarget) \
[(<targetname> <targetgroupname>)]
    targetgroup (addusergroup | rmusergroup) \
[(<usergroupname> <targetgroupname>)]
    targetgroup (addtargetgroup | rmtargetgroup) \
[(<subtargetgroupname> <targetgroupname>)]
    targetgroup delete [([-f | --force] <name>)]

Arguments:
    name                The name of the object.
    username            The name of the user.
    targetname          The name of the target.
    usergroupname       The name of the usergroup.
    targetgroupname     The name of the targetgroup.
    subtargetgroupname  The name of the subtargetgroup.
    comment             A comment about the object.
    pattern             A SQL search pattern.

Options:
    -f, --force             Force deletion without asking confirmation.
    --comment=<comment>     Set a comment to the object.
    --newname=<name>        Set the new name of the object.
    --newcomment=<comment>  Set the new comment of the object.
        """
        commands = {
            "list",
            "search",
            "show",
            "create",
            "edit",
            "delete",
            "adduser",
            "rmuser",
            "addtarget",
            "rmtarget",
            "addusergroup",
            "rmusergroup",
            "addtargetgroup",
            "rmtargetgroup"}
        arguments = {
            "<name>",
            "<username>",
            "<targetname>",
            "<usergroupname>",
            "<targetgroupname>",
            "<subtargetgroupname>",
            "<pattern>"}
        options = {
            "--force",
            "--comment",
            "--newname",
            "--newcomment"}
        method = ""
        param = {}

        for key, value in arg.items():
            if value:
                if key in commands:
                    method = key
                else:
                    param[key] = value

        if param:
            getattr(requests_functions, method)("targetgroup", param)
        else:
            getattr(prompt_functions, method)("targetgroup")

    def do_quit(self, arg):
        """Quit Interactive Mode."""
        print("Goodbye!")
        exit()


def requests_object_method(opt):
    """Call the right method depending of the object type"""
    objects = {"user", "target", "usergroup", "targetgroup"}
    methods = {"list", "search", "show", "delete", "create", "edit",
               "adduser", "rmuser", "addusergroup", "rmusergroup",
               "addtarget", "rmtarget", "addtargetgroup", "rmtargetgroup"}
    param = {}

    # Determine which object/method to use
    # And build a list of list containing all parameters
    for key, value in opt.items():
        if key in objects:
            obj = key
        elif key in methods:
            method = key
        else:
            param[key] = value

    if param:
        # All info are here nothing to ask to the user
        getattr(requests_functions, method)(obj, param)
    else:
        # Need more info, lets prompt user
        getattr(prompt_functions, method)(obj)

opt = docopt(__doc__, sys.argv[1:])
if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)

    if opt["--interactive"]:
        MyInteractive().cmdloop()
    else:
        # We don't need the False options to call the method
        options = {key: value for key, value in opt.items() if value}
        requests_object_method(options)
